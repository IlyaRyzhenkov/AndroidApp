// Generated by Dagger (https://dagger.dev).
package com.example.presentation;

import com.example.presentation.fragments.tab.HabitPagerAdapter;
import com.example.presentation.fragments.tab.TabFragment;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class PresentationModule_ProvideTabFragmentFactory implements Factory<TabFragment> {
  private final PresentationModule module;

  private final Provider<HabitPagerAdapter> habitPagerAdapterProvider;

  public PresentationModule_ProvideTabFragmentFactory(PresentationModule module,
      Provider<HabitPagerAdapter> habitPagerAdapterProvider) {
    this.module = module;
    this.habitPagerAdapterProvider = habitPagerAdapterProvider;
  }

  @Override
  public TabFragment get() {
    return provideTabFragment(module, habitPagerAdapterProvider.get());
  }

  public static PresentationModule_ProvideTabFragmentFactory create(PresentationModule module,
      Provider<HabitPagerAdapter> habitPagerAdapterProvider) {
    return new PresentationModule_ProvideTabFragmentFactory(module, habitPagerAdapterProvider);
  }

  public static TabFragment provideTabFragment(PresentationModule instance,
      HabitPagerAdapter habitPagerAdapter) {
    return Preconditions.checkNotNull(instance.provideTabFragment(habitPagerAdapter), "Cannot return null from a non-@Nullable @Provides method");
  }
}
