// Generated by Dagger (https://dagger.dev).
package com.example.presentation;

import com.example.domain.DomainModule;
import com.example.presentation.fragments.AppInfoFragment;
import com.example.presentation.fragments.habitEditor.HabitsEditorFragment;
import com.example.presentation.fragments.habitList.HabitListFragmentFactory;
import com.example.presentation.fragments.tab.HabitPagerAdapter;
import com.example.presentation.fragments.tab.TabFragment;
import com.example.presentation.service.ToastService;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerPresentationComponent implements PresentationComponent {
  private Provider<HabitsEditorFragment> provideHabitsEditorFragmentProvider;

  private Provider<HabitListFragmentFactory> provideHabitListFragmentFactoryProvider;

  private Provider<HabitPagerAdapter> provideHabitPagerAdapterProvider;

  private Provider<TabFragment> provideTabFragmentProvider;

  private Provider<AppInfoFragment> provideAppInfoFragmentProvider;

  private Provider<ToastService> provideToastServiceProvider;

  private DaggerPresentationComponent(PresentationModule presentationModuleParam) {

    initialize(presentationModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final PresentationModule presentationModuleParam) {
    this.provideHabitsEditorFragmentProvider = DoubleCheck.provider(PresentationModule_ProvideHabitsEditorFragmentFactory.create(presentationModuleParam));
    this.provideHabitListFragmentFactoryProvider = DoubleCheck.provider(PresentationModule_ProvideHabitListFragmentFactoryFactory.create(presentationModuleParam));
    this.provideHabitPagerAdapterProvider = DoubleCheck.provider(PresentationModule_ProvideHabitPagerAdapterFactory.create(presentationModuleParam, provideHabitListFragmentFactoryProvider));
    this.provideTabFragmentProvider = DoubleCheck.provider(PresentationModule_ProvideTabFragmentFactory.create(presentationModuleParam, provideHabitPagerAdapterProvider));
    this.provideAppInfoFragmentProvider = DoubleCheck.provider(PresentationModule_ProvideAppInfoFragmentFactory.create(presentationModuleParam));
    this.provideToastServiceProvider = DoubleCheck.provider(PresentationModule_ProvideToastServiceFactory.create(presentationModuleParam));
  }

  @Override
  public HabitsEditorFragment getHabitsEditorFragment() {
    return provideHabitsEditorFragmentProvider.get();
  }

  @Override
  public TabFragment getTabFragment() {
    return provideTabFragmentProvider.get();
  }

  @Override
  public AppInfoFragment getAppInfoFragment() {
    return provideAppInfoFragmentProvider.get();
  }

  @Override
  public ToastService getToastService() {
    return provideToastServiceProvider.get();
  }

  public static final class Builder {
    private PresentationModule presentationModule;

    private Builder() {
    }

    public Builder presentationModule(PresentationModule presentationModule) {
      this.presentationModule = Preconditions.checkNotNull(presentationModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder domainModule(DomainModule domainModule) {
      Preconditions.checkNotNull(domainModule);
      return this;
    }

    public PresentationComponent build() {
      Preconditions.checkBuilderRequirement(presentationModule, PresentationModule.class);
      return new DaggerPresentationComponent(presentationModule);
    }
  }
}
