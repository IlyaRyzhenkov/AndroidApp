// Generated by view binder compiler. Do not edit!
package com.example.presentation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SeekBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.presentation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityHabitEditionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView HabitColorPickerHeader;

  @NonNull
  public final TextView HabitColorRGB;

  @NonNull
  public final TextView HabitCounterEditorText;

  @NonNull
  public final Button HabitCreateButton;

  @NonNull
  public final TextView HabitDescrEditorText;

  @NonNull
  public final TextView HabitNameEditorText;

  @NonNull
  public final TextView HabitPeriodEditorText;

  @NonNull
  public final TextView HabitPriorityEditorText;

  @NonNull
  public final TextView HabitTypeButtonText;

  @NonNull
  public final RadioButton badHabitButton;

  @NonNull
  public final ImageView colorPickerColor1;

  @NonNull
  public final ImageView colorPickerColor10;

  @NonNull
  public final ImageView colorPickerColor11;

  @NonNull
  public final ImageView colorPickerColor12;

  @NonNull
  public final ImageView colorPickerColor13;

  @NonNull
  public final ImageView colorPickerColor14;

  @NonNull
  public final ImageView colorPickerColor15;

  @NonNull
  public final ImageView colorPickerColor16;

  @NonNull
  public final ImageView colorPickerColor2;

  @NonNull
  public final ImageView colorPickerColor3;

  @NonNull
  public final ImageView colorPickerColor4;

  @NonNull
  public final ImageView colorPickerColor5;

  @NonNull
  public final ImageView colorPickerColor6;

  @NonNull
  public final ImageView colorPickerColor7;

  @NonNull
  public final ImageView colorPickerColor8;

  @NonNull
  public final ImageView colorPickerColor9;

  @NonNull
  public final LinearLayout colorPickerItemsLayout;

  @NonNull
  public final HorizontalScrollView colorPickerScroll;

  @NonNull
  public final EditText editTextHabitCounter;

  @NonNull
  public final EditText editTextHabitDescr;

  @NonNull
  public final EditText editTextHabitName;

  @NonNull
  public final EditText editTextHabitPeriod;

  @NonNull
  public final RadioButton goodHabitButton;

  @NonNull
  public final Guideline guidelineEdit;

  @NonNull
  public final TextView habitEditHeader;

  @NonNull
  public final ImageView pickedColor;

  @NonNull
  public final RadioGroup radioGroup;

  @NonNull
  public final SeekBar seekBar;

  private ActivityHabitEditionBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView HabitColorPickerHeader, @NonNull TextView HabitColorRGB,
      @NonNull TextView HabitCounterEditorText, @NonNull Button HabitCreateButton,
      @NonNull TextView HabitDescrEditorText, @NonNull TextView HabitNameEditorText,
      @NonNull TextView HabitPeriodEditorText, @NonNull TextView HabitPriorityEditorText,
      @NonNull TextView HabitTypeButtonText, @NonNull RadioButton badHabitButton,
      @NonNull ImageView colorPickerColor1, @NonNull ImageView colorPickerColor10,
      @NonNull ImageView colorPickerColor11, @NonNull ImageView colorPickerColor12,
      @NonNull ImageView colorPickerColor13, @NonNull ImageView colorPickerColor14,
      @NonNull ImageView colorPickerColor15, @NonNull ImageView colorPickerColor16,
      @NonNull ImageView colorPickerColor2, @NonNull ImageView colorPickerColor3,
      @NonNull ImageView colorPickerColor4, @NonNull ImageView colorPickerColor5,
      @NonNull ImageView colorPickerColor6, @NonNull ImageView colorPickerColor7,
      @NonNull ImageView colorPickerColor8, @NonNull ImageView colorPickerColor9,
      @NonNull LinearLayout colorPickerItemsLayout, @NonNull HorizontalScrollView colorPickerScroll,
      @NonNull EditText editTextHabitCounter, @NonNull EditText editTextHabitDescr,
      @NonNull EditText editTextHabitName, @NonNull EditText editTextHabitPeriod,
      @NonNull RadioButton goodHabitButton, @NonNull Guideline guidelineEdit,
      @NonNull TextView habitEditHeader, @NonNull ImageView pickedColor,
      @NonNull RadioGroup radioGroup, @NonNull SeekBar seekBar) {
    this.rootView = rootView;
    this.HabitColorPickerHeader = HabitColorPickerHeader;
    this.HabitColorRGB = HabitColorRGB;
    this.HabitCounterEditorText = HabitCounterEditorText;
    this.HabitCreateButton = HabitCreateButton;
    this.HabitDescrEditorText = HabitDescrEditorText;
    this.HabitNameEditorText = HabitNameEditorText;
    this.HabitPeriodEditorText = HabitPeriodEditorText;
    this.HabitPriorityEditorText = HabitPriorityEditorText;
    this.HabitTypeButtonText = HabitTypeButtonText;
    this.badHabitButton = badHabitButton;
    this.colorPickerColor1 = colorPickerColor1;
    this.colorPickerColor10 = colorPickerColor10;
    this.colorPickerColor11 = colorPickerColor11;
    this.colorPickerColor12 = colorPickerColor12;
    this.colorPickerColor13 = colorPickerColor13;
    this.colorPickerColor14 = colorPickerColor14;
    this.colorPickerColor15 = colorPickerColor15;
    this.colorPickerColor16 = colorPickerColor16;
    this.colorPickerColor2 = colorPickerColor2;
    this.colorPickerColor3 = colorPickerColor3;
    this.colorPickerColor4 = colorPickerColor4;
    this.colorPickerColor5 = colorPickerColor5;
    this.colorPickerColor6 = colorPickerColor6;
    this.colorPickerColor7 = colorPickerColor7;
    this.colorPickerColor8 = colorPickerColor8;
    this.colorPickerColor9 = colorPickerColor9;
    this.colorPickerItemsLayout = colorPickerItemsLayout;
    this.colorPickerScroll = colorPickerScroll;
    this.editTextHabitCounter = editTextHabitCounter;
    this.editTextHabitDescr = editTextHabitDescr;
    this.editTextHabitName = editTextHabitName;
    this.editTextHabitPeriod = editTextHabitPeriod;
    this.goodHabitButton = goodHabitButton;
    this.guidelineEdit = guidelineEdit;
    this.habitEditHeader = habitEditHeader;
    this.pickedColor = pickedColor;
    this.radioGroup = radioGroup;
    this.seekBar = seekBar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityHabitEditionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityHabitEditionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_habit_edition, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityHabitEditionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.HabitColorPickerHeader;
      TextView HabitColorPickerHeader = ViewBindings.findChildViewById(rootView, id);
      if (HabitColorPickerHeader == null) {
        break missingId;
      }

      id = R.id.HabitColorRGB;
      TextView HabitColorRGB = ViewBindings.findChildViewById(rootView, id);
      if (HabitColorRGB == null) {
        break missingId;
      }

      id = R.id.HabitCounterEditorText;
      TextView HabitCounterEditorText = ViewBindings.findChildViewById(rootView, id);
      if (HabitCounterEditorText == null) {
        break missingId;
      }

      id = R.id.HabitCreateButton;
      Button HabitCreateButton = ViewBindings.findChildViewById(rootView, id);
      if (HabitCreateButton == null) {
        break missingId;
      }

      id = R.id.HabitDescrEditorText;
      TextView HabitDescrEditorText = ViewBindings.findChildViewById(rootView, id);
      if (HabitDescrEditorText == null) {
        break missingId;
      }

      id = R.id.HabitNameEditorText;
      TextView HabitNameEditorText = ViewBindings.findChildViewById(rootView, id);
      if (HabitNameEditorText == null) {
        break missingId;
      }

      id = R.id.HabitPeriodEditorText;
      TextView HabitPeriodEditorText = ViewBindings.findChildViewById(rootView, id);
      if (HabitPeriodEditorText == null) {
        break missingId;
      }

      id = R.id.HabitPriorityEditorText;
      TextView HabitPriorityEditorText = ViewBindings.findChildViewById(rootView, id);
      if (HabitPriorityEditorText == null) {
        break missingId;
      }

      id = R.id.HabitTypeButtonText;
      TextView HabitTypeButtonText = ViewBindings.findChildViewById(rootView, id);
      if (HabitTypeButtonText == null) {
        break missingId;
      }

      id = R.id.badHabitButton;
      RadioButton badHabitButton = ViewBindings.findChildViewById(rootView, id);
      if (badHabitButton == null) {
        break missingId;
      }

      id = R.id.colorPickerColor1;
      ImageView colorPickerColor1 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor1 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor10;
      ImageView colorPickerColor10 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor10 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor11;
      ImageView colorPickerColor11 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor11 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor12;
      ImageView colorPickerColor12 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor12 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor13;
      ImageView colorPickerColor13 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor13 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor14;
      ImageView colorPickerColor14 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor14 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor15;
      ImageView colorPickerColor15 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor15 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor16;
      ImageView colorPickerColor16 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor16 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor2;
      ImageView colorPickerColor2 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor2 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor3;
      ImageView colorPickerColor3 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor3 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor4;
      ImageView colorPickerColor4 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor4 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor5;
      ImageView colorPickerColor5 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor5 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor6;
      ImageView colorPickerColor6 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor6 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor7;
      ImageView colorPickerColor7 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor7 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor8;
      ImageView colorPickerColor8 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor8 == null) {
        break missingId;
      }

      id = R.id.colorPickerColor9;
      ImageView colorPickerColor9 = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerColor9 == null) {
        break missingId;
      }

      id = R.id.colorPickerItemsLayout;
      LinearLayout colorPickerItemsLayout = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerItemsLayout == null) {
        break missingId;
      }

      id = R.id.colorPickerScroll;
      HorizontalScrollView colorPickerScroll = ViewBindings.findChildViewById(rootView, id);
      if (colorPickerScroll == null) {
        break missingId;
      }

      id = R.id.editTextHabitCounter;
      EditText editTextHabitCounter = ViewBindings.findChildViewById(rootView, id);
      if (editTextHabitCounter == null) {
        break missingId;
      }

      id = R.id.editTextHabitDescr;
      EditText editTextHabitDescr = ViewBindings.findChildViewById(rootView, id);
      if (editTextHabitDescr == null) {
        break missingId;
      }

      id = R.id.editTextHabitName;
      EditText editTextHabitName = ViewBindings.findChildViewById(rootView, id);
      if (editTextHabitName == null) {
        break missingId;
      }

      id = R.id.editTextHabitPeriod;
      EditText editTextHabitPeriod = ViewBindings.findChildViewById(rootView, id);
      if (editTextHabitPeriod == null) {
        break missingId;
      }

      id = R.id.goodHabitButton;
      RadioButton goodHabitButton = ViewBindings.findChildViewById(rootView, id);
      if (goodHabitButton == null) {
        break missingId;
      }

      id = R.id.guidelineEdit;
      Guideline guidelineEdit = ViewBindings.findChildViewById(rootView, id);
      if (guidelineEdit == null) {
        break missingId;
      }

      id = R.id.habitEditHeader;
      TextView habitEditHeader = ViewBindings.findChildViewById(rootView, id);
      if (habitEditHeader == null) {
        break missingId;
      }

      id = R.id.pickedColor;
      ImageView pickedColor = ViewBindings.findChildViewById(rootView, id);
      if (pickedColor == null) {
        break missingId;
      }

      id = R.id.radioGroup;
      RadioGroup radioGroup = ViewBindings.findChildViewById(rootView, id);
      if (radioGroup == null) {
        break missingId;
      }

      id = R.id.seekBar;
      SeekBar seekBar = ViewBindings.findChildViewById(rootView, id);
      if (seekBar == null) {
        break missingId;
      }

      return new ActivityHabitEditionBinding((ConstraintLayout) rootView, HabitColorPickerHeader,
          HabitColorRGB, HabitCounterEditorText, HabitCreateButton, HabitDescrEditorText,
          HabitNameEditorText, HabitPeriodEditorText, HabitPriorityEditorText, HabitTypeButtonText,
          badHabitButton, colorPickerColor1, colorPickerColor10, colorPickerColor11,
          colorPickerColor12, colorPickerColor13, colorPickerColor14, colorPickerColor15,
          colorPickerColor16, colorPickerColor2, colorPickerColor3, colorPickerColor4,
          colorPickerColor5, colorPickerColor6, colorPickerColor7, colorPickerColor8,
          colorPickerColor9, colorPickerItemsLayout, colorPickerScroll, editTextHabitCounter,
          editTextHabitDescr, editTextHabitName, editTextHabitPeriod, goodHabitButton,
          guidelineEdit, habitEditHeader, pickedColor, radioGroup, seekBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
