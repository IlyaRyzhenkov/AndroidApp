// Generated by Dagger (https://dagger.dev).
package com.example.domain;

import com.example.domain.operations.global.GlobalOperationFactory;
import com.example.domain.operations.habit.HabitOperationFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerOperationsComponent implements OperationsComponent {
  private Provider<HabitOperationFactory> provideOperationFactoryProvider;

  private Provider<GlobalOperationFactory> provideGlobalOperationFactoryProvider;

  private DaggerOperationsComponent(DomainModule domainModuleParam) {

    initialize(domainModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final DomainModule domainModuleParam) {
    this.provideOperationFactoryProvider = DoubleCheck.provider(DomainModule_ProvideOperationFactoryFactory.create(domainModuleParam));
    this.provideGlobalOperationFactoryProvider = DoubleCheck.provider(DomainModule_ProvideGlobalOperationFactoryFactory.create(domainModuleParam));
  }

  @Override
  public HabitOperationFactory getHabitOperationFactory() {
    return provideOperationFactoryProvider.get();
  }

  @Override
  public GlobalOperationFactory getGlobalOperationFactory() {
    return provideGlobalOperationFactoryProvider.get();
  }

  public static final class Builder {
    private DomainModule domainModule;

    private Builder() {
    }

    public Builder domainModule(DomainModule domainModule) {
      this.domainModule = Preconditions.checkNotNull(domainModule);
      return this;
    }

    public OperationsComponent build() {
      Preconditions.checkBuilderRequirement(domainModule, DomainModule.class);
      return new DaggerOperationsComponent(domainModule);
    }
  }
}
